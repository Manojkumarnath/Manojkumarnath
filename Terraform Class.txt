resource "aws_instance" "ec2instance" {
  ami           = "ami-0a23ccb2cdd9286bb"
  instance_type = "t2.nano"

  tags = {
    Name = "DBINSTANCE"
  }
}

resource "aws_s3_bucket" "mys3bucket" {
  bucket = "kushalbucket1234"
  acl    = "private"

  tags = {
    Name        = "My bucket"
    Environment = "Dev"
  }
}
==========================
provider "aws" {
  region     = "ap-south-1"
  access_key = ""
  secret_key = ""
}

terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 2.0"
    }
  }
}

=============================
resource "aws_instance" "ec2instance" {
  ami           = "ami-0a23ccb2cdd9286bb"
  instance_type = "t2.nano"

  tags = {
    Name = "DBINSTANCE"
  }
}

output "mydbinstance_privatedns" {
  value = aws_instance.ec2instance.private_dns
}

output "mydbinstancepublicip" {
  value = aws_instance.ec2instance.public_ip
}
output "mydbinstance_public_dns" {                   or we can write as without underscore publicip and privatedns
  value = aws_instance.ec2_instance.public_dns
=================================

resource "aws_eip" "myelasticip" {
  vpc      = true
}

resource "aws_instance" "ec2instance" {
  ami           = "ami-0a23ccb2cdd9286bb"
  instance_type = "t2.nano"

  tags = {
    Name = "DBINSTANCE"
  }
}

resource "aws_eip_association" "eip_assoc" {
  instance_id   = aws_instance.ec2instance.id
  allocation_id = aws_eip.myelasticip.id
}

==================================
resource "aws_eip" "myelasticip" {
  vpc      = true
}

resource "aws_instance" "ec2instance" {
  ami           = "ami-0a23ccb2cdd9286bb"
  instance_type = "t2.nano"
  vpc_security_group_ids = [aws_security_group.dbsg.id]
  tags = {
    Name = "DBINSTANCE"
  }
}

resource "aws_security_group" "dbsg" {
  name        = "databasesg"
  description = "Allow TLS inbound traffic"
  ingress {
      description      = "TLS from VPC"
      from_port        = 443
      to_port          = 443
      protocol         = "tcp"
      cidr_blocks      = ["${aws_eip.myelasticip.public_ip}/32"]
    }
  tags = {
    Name = "allow_tls"
  }
}

resource "aws_eip_association" "eip_assoc" {
  instance_id   = aws_instance.ec2instance.id
  allocation_id = aws_eip.myelasticip.id
}
=======================================

some important information
#always write the info as much as possible in desired state file.
#desired state file

#resource name ==== aws_s3_bucket.mys3bucket
#resource name ==== aws_instance.ec2instance


#how will you know that what are the keys you must write in resource section...
=======================================

resource "aws_instance" "ec2instance" {
  ami           = "ami-0a23ccb2cdd9286bb"
  instance_type = var.instancelist["us-east-1"]
}


variable "instancelist" {
  type = map
  default = {
    us-east-1 = "t2.micro"
    ap-south-1 = "t2.small"
    us-west-1 = "t2.nano"
  }
}

=========================================
resource "aws_instance" "ec2instance" {
  ami           = "ami-0a23ccb2cdd9286bb"
  instance_type = var.instancelist[1]
}


variable "instancelist" {
  type = list
  default = ["m5.large","t2.small","t2.micro"]
}

===========================================
=============================
Count 

resource "aws_iam_user" "myuser" {
name = "abc${count.index}"
path = "/system/"
count = 5
}
=============================
resource "aws_instance" "ec2instance" {
ami = "ami-0a23ccb2cdd9286bb"
instance_type = "t2.micro"
count = 3
}
=============================
variable "namesofusers" {
type = list
default = ["sachin","gaurav","saket","alice","bob","sarah"]
}

resource "aws_iam_user" "myuser" {
name = var.namesofusers[count.index]
path = "/system/"
count = 6
}
================================

resource "aws_ebs_volume" "myebs" {
availability_zone = "ap-south-1a"
size = 40
type = "gp2"

 tags = {
Name = "sandeep"
}
}

===============================================
resource "aws_ebs_volume" "ebsvol1" {
  availability_zone = "ap-south-1a"
  size              = 1
  type = "gp2"
}

 


resource "aws_instance" "ec2instance" {
  ami                    = "ami-0a23ccb2cdd9286bb"
  instance_type          = "t2.micro"
  availability_zone = "ap-south-1a"
    tags = {
    Name = "DBINSTANCE"
  }
}

 


resource "aws_volume_attachment" "ebs_att" {
  device_name = "/dev/sdh"
  volume_id   = aws_ebs_volume.ebsvol1.id
  instance_id = aws_instance.ec2instance.id
}
==================================================

resource "aws_instance" "ec2instance" {
ami = lookup(var.ami,var.region)
instance_type = "t2.micro"
count = 2
tags = {
Name = element(var.tags,count.index)
}
}

variable "tags" {
type = list
default = ["firstec2","secondec2"]
}

variable "region" {}

variable "ami" {
type = map
default = {
"us-east-1" = "ami-087c17d1fe0178315"
"ap-south-1" = "ami-0a23ccb2cdd9286bb"
"us-west-1" = "ami-011996ff98de391d1"
}
}

locals {
time = formatdate("DD MMM YYYY hh:mm ZZZ", timestamp())
}

output "timestamp" {
value = local.time
}

need to change the provider.tf also 
provider "aws" {
region = var.region
access_key = ""
secret_key = ""
}
===============================================
resource "aws_instance" "ec2instance" {
  ami           = "ami-0a23ccb2cdd9286bb"
  instance_type = "t2.micro"
  key_name = "deployer-key"
}
resource "aws_key_pair" "key" {
key_name = "deployer-key"
public_key = "SHA256:T9588fS17T0r9fMyF+Y29jCJloAKpYV1mylK1P13Lys"
}

resource "aws_key_pair" "key" {
key_name = "deployer-key"
public_key = file("${path.module}/id_rsa.pub")
}

=======================================